#!/bin/bash

########################################
# Detect system and set variables
########################################

PROJECT=vae_sampler
BUILD_DIR=$PROJECT
PATCH_DIR="./patches"

OS=$(uname -s)

if [ $OS = "Darwin" ] ; then
	SUFFIX=~.pd_darwin
	echo "Building for macOS"
elif [ $OS = "Linux" ] ; then
	SUFFIX=~.pd_linux
	echo "Building for Linux"
else
	echo "Unsupported OS $OS"
	exit -1
fi

PRODUCT=$PROJECT$SUFFIX

########################################
# Check our dependencies directories
########################################

if [ -z "$TORCH_DIR" ] ; then
	if [ -d ./libtorch ] ; then
		TORCH_DIR=./libtorch
	else
		echo "Can't find libtorch directory, please set variable TORCH_DIR to the libtorch directory path"
		exit -1
	fi
fi

if [ "$CUDA" = true ] ; then
	if [ -z "$CUDNN_DIR" ] ; then
		if [ -d ./cuda ] ; then
			CUDNN_DIR=./cuda
		else
			echo "Can't find cuDNN directory, please set variable CUDNN_DIR to the cuDNN directory path"
			exit -1
		fi
	fi

	if [ ! -e "$TORCH_DIR"/lib/libc10_cuda.so ] ; then
		echo "WARNING: you are compiling with CUDA support but it seems you are using a CPU version of libtorch !! It probably won't compile at all..."
	fi
else
	if [ -e "$TORCH_DIR"/lib/libc10_cuda.so ] ; then
			echo "WARNING: you are compiling without CUDA support but it seems you are using a GPU version of libtorch !! It migth make the external instable..."
	fi
fi

if [ -z "$FFTW_DIR" ] ; then
	if [ -d ./fftw ] ; then
		FFTW_DIR=./fftw
	else
		echo "Can't find fftw directory, please set variable FFTW_DIR to the fftw directory path"
		exit -1
	fi
fi

########################################
# Make our build directories
########################################

echo "Make build directories..."

if [ ! -d $BUILD_DIR ] ; then
	mkdir $BUILD_DIR
fi

if [ ! -d $BUILD_DIR/lib ] ; then
	mkdir $BUILD_DIR/lib
fi

########################################
# Compile the external
########################################

if [ $OS = "Darwin" ] ; then
	CC=clang
	CPP=clang++
elif [ $OS = "Linux" ] ; then
	CC=gcc
	CPP=g++
fi

SRC_C="src/vae_sampler~.c"
SRC_CPP="src/vae_util.cpp src/griffin_lim.cpp"
INCLUDE="-Isrc -I$FFTW_DIR/api -I$TORCH_DIR/include -I$TORCH_DIR/include/torch/csrc/api/include -I$CUDNN_DIR/include"
CFLAGS=""
CPPFLAGS="-std=c++11 -std=gnu++11"
OBJECTS="$BUILD_DIR/vae_sampler~.o $BUILD_DIR/vae_util.o $BUILD_DIR/griffin_lim.o"

if [ $OS = "Darwin" ] ; then
	CUDA=false;
	LFLAGS="-undefined dynamic_lookup -L$TORCH_DIR/lib -ltorch -lcaffe2 -lc10 -L./fftw/.libs -lfftw3f -lpthread"

elif [ $OS = "Linux" ] ; then

	if [ "$CUDA" = true ] ; then
		CFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0 -DUSE_CUDA $CFLAGS"
		CPPFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0 -DUSE_CUDA $CPPFLAGS"
		LFLAGS="-fPIC -Wl,-rpath,\$ORIGIN/lib -L$TORCH_DIR/lib -L/usr/lib/x86_64-linux-gnu/ -L$CUDNN_DIR/lib64 -ltorch -lcuda -lnvrtc -lnvToolsExt -Wl,-Bstatic -lcudart_static -Wl,-Bdynamic -lpthread -ldl -lrt -lcaffe2 -lcaffe2_gpu -lc10_cuda -lc10 -lcufft -lcurand -lcudnn -lculibos -lcublas -lcublas_device -lcudart_static -L$FFTW_DIR/.libs -lfftw3f -lpthread -ldl -lrt"
	else
		CFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0 $CFLAGS"
		CPPFLAGS="-fPIC -D_GLIBCXX_USE_CXX11_ABI=0 $CPPFLAGS"
		LFLAGS="-fPIC -Wl,-rpath,\$ORIGIN/lib -L$TORCH_DIR/lib -ltorch -lcaffe2 -lc10 -L$FFTW_DIR/.libs -lfftw3f -lpthread"
	fi
fi

if [ "$DEBUG" = true ] ; then
	CFLAGS="-g -O0 -DDEBUG $CFLAGS"
	CPPFLAGS="-g -O0 -DDEBUG $CPPFLAGS"
	LFLAGS="-g -O0 $LFLAGS"
else
	CFLAGS="-O2 $CFLAGS"
	CPPFLAGS="-O2 $CPPFLAGS"
	LFLAGS="-O2 $LFLAGS"
fi

if [ "$PROFILE" = true ] ; then
	CFLAGS="$CFLAGS -DPROFILE"
	CPPFLAGS="$CPPFLAGS -DPROFILE"
fi


echo "Compile c files..."
$CC $INCLUDE  $CFLAGS -o $BUILD_DIR/vae_sampler~.o -c src/vae_sampler~.c

echo "Compile cpp files..."
$CPP $INCLUDE $CPPFLAGS -o $BUILD_DIR/vae_util.o -c src/vae_util.cpp
$CPP $INCLUDE $CPPFLAGS -o $BUILD_DIR/griffin_lim.o -c src/griffin_lim.cpp

echo "Link shared object..."
$CPP -shared -o $BUILD_DIR/$PRODUCT $OBJECTS $LFLAGS

if [ $OS = "Darwin" ] ; then
	echo "Patch dependencies install name"
	install_name_tool -add_rpath @loader_path/lib $BUILD_DIR/$PRODUCT
fi
########################################
# Bundle the external with its dependencies and clean
########################################

echo "Bundle the external with its dependencies..."

cp "$TORCH_DIR"/lib/* "$BUILD_DIR"/lib

if [ "$CUDA" = true ] ; then
	cp "$CUDNN_DIR"/lib64/* "$BUILD_DIR"/lib
fi ;
cp "$PATCH_DIR"/*.pd "$BUILD_DIR"/
rm "$BUILD_DIR"/*.o
